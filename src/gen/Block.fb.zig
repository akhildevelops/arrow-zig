//!
//! generated by flatc-zig
//! binary:     src/gen/format/File.bfbs
//! schema:     format/File.fbs
//! file ident: //File.fbs
//! typename    Block
//!

const std = @import("std");
const fb = @import("flatbufferz");
const Builder = fb.Builder;

pub const BlockT = struct {
    /// Index to the start of the RecordBlock (note this is past the Message header)
    offset: i64 = 0,
    /// Length of the metadata
    metaDataLength: i32 = 0,
    /// Length of the data (this is aligned so there can be a gap between this and
    /// the metadata).
    bodyLength: i64 = 0,

    pub fn Pack(rcv: BlockT, __builder: *Builder, __pack_opts: fb.common.PackOptions) !u32 {
        _ = .{__pack_opts};
        return Block.Create(__builder, rcv.offset, rcv.metaDataLength, rcv.bodyLength);
    }
    pub fn UnpackTo(rcv: Block, t: *BlockT, __pack_opts: fb.common.PackOptions) !void {
        _ = .{__pack_opts};
        t.offset = rcv.Offset();
        t.metaDataLength = rcv.MetaDataLength();
        t.bodyLength = rcv.BodyLength();
    }

    pub fn Unpack(rcv: Block, __pack_opts: fb.common.PackOptions) !BlockT {
        var t = BlockT{};
        try BlockT.UnpackTo(rcv, &t, __pack_opts);
        return t;
    }

    pub fn deinit(self: *BlockT, allocator: std.mem.Allocator) void {
        _ = .{ self, allocator };
    }
};

pub const Block = struct {
    _tab: fb.Struct,

    pub fn init(bytes: []u8, pos: u32) Block {
        return .{ ._tab = .{ ._tab = .{ .bytes = bytes, .pos = pos } } };
    }

    pub fn Table(x: Block) fb.Table {
        return x._tab._tab;
    }

    /// Index to the start of the RecordBlock (note this is past the Message header)
    pub fn Offset(rcv: Block) i64 {
        return rcv._tab.read(i64, rcv._tab._tab.pos + 0);
    }
    pub fn MutateOffset(rcv: Block, n: i64) bool {
        return rcv._tab._tab.mutate(i64, rcv._tab._tab.pos + 0, n);
    }

    /// Length of the metadata
    pub fn MetaDataLength(rcv: Block) i32 {
        return rcv._tab.read(i32, rcv._tab._tab.pos + 8);
    }
    pub fn MutateMetaDataLength(rcv: Block, n: i32) bool {
        return rcv._tab._tab.mutate(i32, rcv._tab._tab.pos + 8, n);
    }

    /// Length of the data (this is aligned so there can be a gap between this and
    /// the metadata).
    pub fn BodyLength(rcv: Block) i64 {
        return rcv._tab.read(i64, rcv._tab._tab.pos + 16);
    }
    pub fn MutateBodyLength(rcv: Block, n: i64) bool {
        return rcv._tab._tab.mutate(i64, rcv._tab._tab.pos + 16, n);
    }

    pub fn Create(__builder: *Builder, offset: i64, metaDataLength: i32, bodyLength: i64) !u32 {
        try __builder.prep(8, 24);
        try __builder.prepend(i64, bodyLength);
        __builder.pad(4);
        try __builder.prepend(i32, metaDataLength);
        try __builder.prepend(i64, offset);
        return __builder.offset();
    }
    pub fn Unpack(rcv: Block, __pack_opts: fb.common.PackOptions) !BlockT {
        return BlockT.Unpack(rcv, __pack_opts);
    }
    pub fn FinishBuffer(__builder: *Builder, root: u32) !void {
        return __builder.Finish(root);
    }

    pub fn FinishSizePrefixedBuffer(__builder: *Builder, root: u32) !void {
        return __builder.FinishSizePrefixed(root);
    }
};
