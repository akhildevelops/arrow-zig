//!
//! generated by flatc-zig
//! binary:     gen/format/Schema.bfbs
//! schema:     format/Schema.fbs
//! file ident: //Schema.fbs
//! typename    Duration
//!

const std = @import("std");
const fb = @import("flatbufferz");
const Builder = fb.Builder;

const TimeUnit = @import("TimeUnit.fb.zig").TimeUnit;

pub const DurationT = struct {
    unit: TimeUnit = @intToEnum(TimeUnit, 1),

    pub fn Pack(rcv: DurationT, __builder: *Builder, __pack_opts: fb.common.PackOptions) fb.common.PackError!u32 {
        _ = .{__pack_opts};
        var __tmp_offsets = std.ArrayListUnmanaged(u32){};
        defer if (__pack_opts.allocator) |alloc| __tmp_offsets.deinit(alloc);
        try Duration.Start(__builder);
        try Duration.AddUnit(__builder, rcv.unit);
        return Duration.End(__builder);
    }

    pub fn UnpackTo(rcv: Duration, t: *DurationT, __pack_opts: fb.common.PackOptions) !void {
        _ = .{__pack_opts};
        t.unit = rcv.Unit();
    }

    pub fn Unpack(rcv: Duration, __pack_opts: fb.common.PackOptions) fb.common.PackError!DurationT {
        var t = DurationT{};
        try DurationT.UnpackTo(rcv, &t, __pack_opts);
        return t;
    }

    pub fn deinit(self: *DurationT, allocator: std.mem.Allocator) void {
        _ = .{ self, allocator };
    }
};

pub const Duration = struct {
    _tab: fb.Table,

    pub fn GetRootAs(buf: []u8, offset: u32) Duration {
        const n = fb.encode.read(u32, buf[offset..]);
        return Duration.init(buf, n + offset);
    }

    pub fn GetSizePrefixedRootAs(buf: []u8, offset: u32) Duration {
        const n = fb.encode.read(u32, buf[offset + fb.Builder.size_u32 ..]);
        return Duration.init(buf, n + offset + fb.Builder.size_u32);
    }

    pub fn init(bytes: []u8, pos: u32) Duration {
        return .{ ._tab = .{ .bytes = bytes, .pos = pos } };
    }

    pub fn Table(x: Duration) fb.Table {
        return x._tab;
    }

    pub fn Unit(rcv: Duration) TimeUnit {
        const o = rcv._tab.offset(4);
        if (o != 0) {
            return rcv._tab.read(TimeUnit, o + rcv._tab.pos);
        }
        return @intToEnum(TimeUnit, 1);
    }

    pub fn MutateUnit(rcv: Duration, n: TimeUnit) bool {
        return rcv._tab.mutateSlot(TimeUnit, 4, n);
    }

    pub fn Start(__builder: *Builder) !void {
        try __builder.startObject(1);
    }
    pub fn AddUnit(__builder: *Builder, unit: TimeUnit) !void {
        try __builder.prependSlot(TimeUnit, 0, unit, @intToEnum(TimeUnit, 1));
    }

    pub fn End(__builder: *Builder) !u32 {
        return __builder.endObject();
    }

    pub fn Unpack(rcv: Duration, __pack_opts: fb.common.PackOptions) !DurationT {
        return DurationT.Unpack(rcv, __pack_opts);
    }
    pub fn FinishBuffer(__builder: *Builder, root: u32) !void {
        return __builder.Finish(root);
    }

    pub fn FinishSizePrefixedBuffer(__builder: *Builder, root: u32) !void {
        return __builder.FinishSizePrefixed(root);
    }
};
