//!
//! generated by flatc-zig
//! binary:     src/ipc/gen/format/Schema.bfbs
//! schema:     format/Schema.fbs
//! file ident: //Schema.fbs
//! typename    FixedSizeBinary
//!

const std = @import("std");
const fb = @import("flatbufferz");
const Builder = fb.Builder;

pub const FixedSizeBinaryT = struct {
    /// Number of bytes per value
    byteWidth: i32 = 0,

    pub fn Pack(rcv: FixedSizeBinaryT, __builder: *Builder, __pack_opts: fb.common.PackOptions) fb.common.PackError!u32 {
        _ = .{__pack_opts};
        var __tmp_offsets = std.ArrayListUnmanaged(u32){};
        defer if (__pack_opts.allocator) |alloc| __tmp_offsets.deinit(alloc);
        try FixedSizeBinary.Start(__builder);
        try FixedSizeBinary.AddByteWidth(__builder, rcv.byteWidth);
        return FixedSizeBinary.End(__builder);
    }

    pub fn UnpackTo(rcv: FixedSizeBinary, t: *FixedSizeBinaryT, __pack_opts: fb.common.PackOptions) !void {
        _ = .{__pack_opts};
        t.byteWidth = rcv.ByteWidth();
    }

    pub fn Unpack(rcv: FixedSizeBinary, __pack_opts: fb.common.PackOptions) fb.common.PackError!FixedSizeBinaryT {
        var t = FixedSizeBinaryT{};
        try FixedSizeBinaryT.UnpackTo(rcv, &t, __pack_opts);
        return t;
    }

    pub fn deinit(self: *FixedSizeBinaryT, allocator: std.mem.Allocator) void {
        _ = .{ self, allocator };
    }
};

pub const FixedSizeBinary = struct {
    _tab: fb.Table,

    pub fn GetRootAs(buf: []u8, offset: u32) FixedSizeBinary {
        const n = fb.encode.read(u32, buf[offset..]);
        return FixedSizeBinary.init(buf, n + offset);
    }

    pub fn GetSizePrefixedRootAs(buf: []u8, offset: u32) FixedSizeBinary {
        const n = fb.encode.read(u32, buf[offset + fb.Builder.size_u32 ..]);
        return FixedSizeBinary.init(buf, n + offset + fb.Builder.size_u32);
    }

    pub fn init(bytes: []u8, pos: u32) FixedSizeBinary {
        return .{ ._tab = .{ .bytes = bytes, .pos = pos } };
    }

    pub fn Table(x: FixedSizeBinary) fb.Table {
        return x._tab;
    }

    /// Number of bytes per value
    pub fn ByteWidth(rcv: FixedSizeBinary) i32 {
        const o = rcv._tab.offset(4);
        if (o != 0) {
            return rcv._tab.read(i32, o + rcv._tab.pos);
        }
        return 0;
    }

    pub fn MutateByteWidth(rcv: FixedSizeBinary, n: i32) bool {
        return rcv._tab.mutateSlot(i32, 4, n);
    }

    pub fn Start(__builder: *Builder) !void {
        try __builder.startObject(1);
    }
    pub fn AddByteWidth(__builder: *Builder, byteWidth: i32) !void {
        try __builder.prependSlot(i32, 0, byteWidth, 0);
    }

    pub fn End(__builder: *Builder) !u32 {
        return __builder.endObject();
    }

    pub fn Unpack(rcv: FixedSizeBinary, __pack_opts: fb.common.PackOptions) !FixedSizeBinaryT {
        return FixedSizeBinaryT.Unpack(rcv, __pack_opts);
    }
    pub fn FinishBuffer(__builder: *Builder, root: u32) !void {
        return __builder.Finish(root);
    }

    pub fn FinishSizePrefixedBuffer(__builder: *Builder, root: u32) !void {
        return __builder.FinishSizePrefixed(root);
    }
};
