//!
//! generated by flatc-zig
//! binary:     gen/format/Schema.bfbs
//! schema:     format/Schema.fbs
//! file ident: //Schema.fbs
//! typename    Int
//!

const std = @import("std");
const fb = @import("flatbufferz");
const Builder = fb.Builder;

pub const IntT = struct {
    bitWidth: i32 = 0,
    is_signed: bool = false,

    pub fn Pack(rcv: IntT, __builder: *Builder, __pack_opts: fb.common.PackOptions) fb.common.PackError!u32 {
        _ = .{__pack_opts};
        var __tmp_offsets = std.ArrayListUnmanaged(u32){};
        defer if (__pack_opts.allocator) |alloc| __tmp_offsets.deinit(alloc);
        try Int.Start(__builder);
        try Int.AddBitWidth(__builder, rcv.bitWidth);
        try Int.AddIsSigned(__builder, rcv.is_signed);
        return Int.End(__builder);
    }

    pub fn UnpackTo(rcv: Int, t: *IntT, __pack_opts: fb.common.PackOptions) !void {
        _ = .{__pack_opts};
        t.bitWidth = rcv.BitWidth();

        t.is_signed = rcv.IsSigned();
    }

    pub fn Unpack(rcv: Int, __pack_opts: fb.common.PackOptions) fb.common.PackError!IntT {
        var t = IntT{};
        try IntT.UnpackTo(rcv, &t, __pack_opts);
        return t;
    }

    pub fn deinit(self: *IntT, allocator: std.mem.Allocator) void {
        _ = .{ self, allocator };
    }
};

pub const Int = struct {
    _tab: fb.Table,

    pub fn GetRootAs(buf: []u8, offset: u32) Int {
        const n = fb.encode.read(u32, buf[offset..]);
        return Int.init(buf, n + offset);
    }

    pub fn GetSizePrefixedRootAs(buf: []u8, offset: u32) Int {
        const n = fb.encode.read(u32, buf[offset + fb.Builder.size_u32 ..]);
        return Int.init(buf, n + offset + fb.Builder.size_u32);
    }

    pub fn init(bytes: []u8, pos: u32) Int {
        return .{ ._tab = .{ .bytes = bytes, .pos = pos } };
    }

    pub fn Table(x: Int) fb.Table {
        return x._tab;
    }

    pub fn BitWidth(rcv: Int) i32 {
        const o = rcv._tab.offset(4);
        if (o != 0) {
            return rcv._tab.read(i32, o + rcv._tab.pos);
        }
        return 0;
    }

    pub fn MutateBitWidth(rcv: Int, n: i32) bool {
        return rcv._tab.mutateSlot(i32, 4, n);
    }

    pub fn IsSigned(rcv: Int) bool {
        const o = rcv._tab.offset(6);
        if (o != 0) {
            return rcv._tab.read(bool, o + rcv._tab.pos);
        }
        return false;
    }

    pub fn MutateIsSigned(rcv: Int, n: bool) bool {
        return rcv._tab.mutateSlot(bool, 6, n);
    }

    pub fn Start(__builder: *Builder) !void {
        try __builder.startObject(2);
    }
    pub fn AddBitWidth(__builder: *Builder, bitWidth: i32) !void {
        try __builder.prependSlot(i32, 0, bitWidth, 0);
    }

    pub fn AddIsSigned(__builder: *Builder, is_signed: bool) !void {
        try __builder.prependSlot(bool, 1, is_signed, false);
    }

    pub fn End(__builder: *Builder) !u32 {
        return __builder.endObject();
    }

    pub fn Unpack(rcv: Int, __pack_opts: fb.common.PackOptions) !IntT {
        return IntT.Unpack(rcv, __pack_opts);
    }
    pub fn FinishBuffer(__builder: *Builder, root: u32) !void {
        return __builder.Finish(root);
    }

    pub fn FinishSizePrefixedBuffer(__builder: *Builder, root: u32) !void {
        return __builder.FinishSizePrefixed(root);
    }
};
